<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trazabilidad y Suministro</title>
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #121212;
            font-family: 'Inter', sans-serif;
            color: #000000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .container {
            background-color: #1f1f1f;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            width: 100%;
            max-width: 600px;
        }
        h1 {
            color: #ffffff;
            font-size: 1.5rem;
            text-align: center;
            margin-bottom: 1.5rem;
        }
        .btn-primary {
            background-color: #ff4d4d;
            color: #ffffff;
        }
        .btn-secondary {
            background-color: #ffffff;
            color: #000000;
        }
        .btn-tertiary {
            background-color: #ffd700;
            color: #000000;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Gesti칩n de Trazabilidad</h1>
        <div class="mb-4">
            <button id="connectButton" class="btn-primary w-full py-2 px-4 rounded">Conectar MetaMask</button>
        </div>
        <div class="mb-4">
            <input id="productName" type="text" placeholder="Nombre del Producto" class="w-full p-2 rounded mb-2">
            <button id="registerProductButton" class="btn-secondary w-full py-2 px-4 rounded">Registrar Producto</button>
        </div>
        <div class="mb-4">
            <input id="productId" type="text" placeholder="ID del Producto" class="w-full p-2 rounded mb-2">
            <input id="location" type="text" placeholder="Ubicaci칩n" class="w-full p-2 rounded mb-2">
            <button id="updateStatusButton" class="btn-primary w-full py-2 px-4 rounded">Actualizar Estado</button>
        </div>
        <div class="mb-4">
            <input id="historyProductId" type="text" placeholder="ID del Producto" class="w-full p-2 rounded mb-2">
            <button id="getHistoryButton" class="btn-tertiary w-full py-2 px-4 rounded">Obtener Historial</button>
            <div id="historyOutput" class="text-white mt-4"></div>
        </div>
    </div>

    <script>
        const contractAddress = "0x3b4167a29d94027A99dA21c249332205E3a5af9f";
        const contractABI = [
            {
                "inputs": [
                    { "internalType": "uint256", "name": "_idProducto", "type": "uint256" },
                    { "internalType": "string", "name": "_ubicacion", "type": "string" }
                ],
                "name": "actualizarEstado",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    { "internalType": "string", "name": "_nombre", "type": "string" }
                ],
                "name": "registrarProducto",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "contadorProductos",
                "outputs": [
                    { "internalType": "uint256", "name": "", "type": "uint256" }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    { "internalType": "uint256", "name": "_idProducto", "type": "uint256" }
                ],
                "name": "obtenerHistorial",
                "outputs": [
                    {
                        "components": [
                            { "internalType": "string", "name": "ubicacion", "type": "string" },
                            { "internalType": "uint256", "name": "marcaTiempo", "type": "uint256" }
                        ],
                        "internalType": "struct TrazabilidadManzanas.Estado[]",
                        "name": "",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "obtenerListaProductos",
                "outputs": [
                    { "internalType": "string[]", "name": "", "type": "string[]" }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    { "internalType": "uint256", "name": "_idProducto", "type": "uint256" }
                ],
                "name": "obtenerUltimoEstado",
                "outputs": [
                    {
                        "components": [
                            { "internalType": "string", "name": "ubicacion", "type": "string" },
                            { "internalType": "uint256", "name": "marcaTiempo", "type": "uint256" }
                        ],
                        "internalType": "struct TrazabilidadManzanas.Estado",
                        "name": "",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    { "internalType": "uint256", "name": "", "type": "uint256" }
                ],
                "name": "productos",
                "outputs": [
                    { "internalType": "string", "name": "nombre", "type": "string" }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        let provider;
        let signer;
        let contract;

        document.getElementById('connectButton').addEventListener('click', async () => {
            if (typeof window.ethereum !== 'undefined') {
                await ethereum.request({ method: 'eth_requestAccounts' });
                provider = new ethers.providers.Web3Provider(window.ethereum);
                signer = provider.getSigner();
                contract = new ethers.Contract(contractAddress, contractABI, signer);
                alert('MetaMask Conectado');
            } else {
                alert('MetaMask no est치 instalado');
            }
        });

        document.getElementById('registerProductButton').addEventListener('click', async () => {
            const name = document.getElementById('productName').value;
            await contract.registrarProducto(name);
            alert(`Producto ${name} registrado`);
        });

        document.getElementById('updateStatusButton').addEventListener('click', async () => {
            const idProducto = document.getElementById('productId').value;
            const ubicacion = document.getElementById('location').value;
            await contract.actualizarEstado(idProducto, ubicacion);
            alert(`Estado del producto ${idProducto} actualizado a ${ubicacion}`);
        });

        document.getElementById('getHistoryButton').addEventListener('click', async () => {
            const idProducto = document.getElementById('historyProductId').value;
            const history = await contract.obtenerHistorial(idProducto);
            let output = '';
            history.forEach(event => {
                const date = new Date(event.marcaTiempo * 1000);
                output += `Ubicaci칩n: ${event.ubicacion}, Fecha: ${date.toLocaleString()}\n`;
            });
            document.getElementById('historyOutput').innerText = output;
        });
    </script>
</body>
</html>
